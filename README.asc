= Try Git

Git references, commands, tools and flows.

=== References:
* https://guides.github.com/introduction/flow/[Understanding the GitHub Flow] in GitHub Guides.
* https://git-scm.com/book/en/v2[Pro Git book] is an excellent resource to teach you the inner workings of Git.
* https://git-scm.com/docs[Git documentation] for a full list of functions.
* http://github.com/training/online[GitHub Training]
* http://gitimmersion.com/[Git Immersion]
* http://rogerdudler.github.com/git-guide/[git - the simple guide]
* http://gitreal.codeschool.com/?utm_source=github&utm_medium=codeschool_option&utm_campaign=trygit[Git Real course] (free)

== AsciiDoc
Moving from Markdown to the amazing Asciidoc format link:AsciiDoc.asc[AsciiDoc.asc]

== Git Magic
Git Magic explained: link:/GitMagic/01-Intro.asc[GitMagic]

== 5-min Intro to Git 
From https://www.codeschool.com/courses/try-git[tryGit]

. git init +
Directory:
A folder used for storing multiple files. +
Repository:
A directory where Git has been initialized to start version controlling your files. +
To initialize a Git repository here, type the following command: +
`git init`

. git status +
The .git directory has all sorts of directories and files inside it. You'll rarely ever need to do anything inside here but it's the guts of Git, where all the magic happens. +
type the +
`git status` +
command to see what the current state of our project is.

. git log +
Think of Git's log as a journal that remembers all the changes we've committed so far, in the order we committed them. +
Use +
`git log --summary` + 
to see more information for each commit. You can see where new files were added for the first time or where files were deleted. It's a good overview of what's going on in the project.

. git add +
To tell Git to start tracking changes made to `file`, we first need to add it to the staging area by using +
`git add file` +
staged:
Files are ready to be committed. +
unstaged:
Files with changes that have not been prepared to be committed. +
untracked:
Files aren't tracked by Git yet. This usually indicates a newly created file. +
deleted:
File has been deleted and is waiting to be removed from Git.

.. git add all +
 type `git add -A .` where the dot stands for the current directory, so everything in and beneath it is added. +
 The -A ensures even file deletions are included.
 
.. git add all changes +
You also can use wildcards if you want to add many files of the same type. +
we can add all the new files using a wildcard with +
`git add '*.txt'` +
Wildcards: +
We need quotes so that Git will receive the wildcard before our shell can interfere with it. Without quotes our shell will only execute the wildcard search within the current directory. Git will receive the list of files the shell found instead of the wildcard and it will not be able to add the files inside of the sub-directories. +
When using wildcards you want to be extra careful when doing commits. Make sure to check what files and folders are staged by using `git status` before you do the actual commit. This way you can be sure you're committing only the things you want.

.. git reset +
use `git reset <filename>` to remove a file or files from the staging area.

.. git checkout -- <target> +
git reset did a great job of unstaging <filename>, but you'll notice that its still there. Its just not staged anymore. It would be great if we could go back to how things were before. +
Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>. +
Go ahead and get rid of all the changes since the last commit for <filename>: +
`git checkout -- <filename>` +
So, why do I have to use this '--' thing? git checkout seems to work fine without it. It's simply promising the command line that there are no more options after the '--'. This way if you happen to have a branch named <filename>, it will still revert the file, instead of switching to the branch of the same name.

. git rename and move 

.. To rename any file in your repository: +
`git mv <old-filename> <new-filename>`

.. To move files within a repository, +
first move the file to a new location within the directory, +
and then stage the file for commit to your local repository: +
`git add .` +
This will delete, or `git rm`, the file from the old location and add, or `git add`, the file to the new location.

. git commit +
Staging Area: +
A place where we can group files together before we "commit" them to Git. The files listed here are in the Staging Area, and they are not in our repository yet. We could add or remove files from the stage before we store them in the repository. +
Commit: +
To store our staged changes we run the commit command with a message describing what we've changed. +
A "commit" is a snapshot of our repository. This way if we ever need to look back at the changes we've made (or if someone else does), we will see a nice timeline of all changes. +
`git commit -m "commit message"`

. git remote +
To push our local repo to the GitHub server we'll need to add a remote repository. +
This command takes a remote name and a repository URL, which in our case is +
https://github.com/whitechno/try-git.git +
`git remote add origin https://github.com/whitechno/try-git.git` +
Git doesn't care what you name your remotes, but it's typical to name your main one origin. +
It's also a good idea for your main repository to be on a remote server like GitHub in case your machine is lost at sea during a transatlantic boat cruise or crushed by three monkey statues during an earthquake. 

.. To see repository URL: +
`git remote -v`

.. Create a new local repository from existing *empty* remote repository: 
+
----
git clone https://github.com/whitechno/try-git.git
cd try-git
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master
----

.. Adding existing local folder to remote repository:
+
----
cd existing_folder
git init
git remote add origin https://github.com/whitechno/try-git.git
git add .
git commit
git push -u origin master
----

. git push +
The push command tells Git where to put our commits when we're ready. +
The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do: +
`git push -u origin master` +
When you start to get the hang of git you can do some really cool things with hooks when you push. +
For example, you can upload directly to a webserver whenever you push to your master remote instead of having to upload your site with an ftp client. Check out http://git-scm.com/book/en/Customizing-Git-Git-Hooks[Customizing Git - Git Hooks] for more information.

. git pull +
We can check for changes on our GitHub repository and pull down any new changes by running: +
`git pull origin master`

. git stash +
Sometimes when you go to pull you may have changes you don't want to commit just yet. One option you have, other than commiting, is to stash the changes. +
Use the command +
`git stash` + 
to stash your changes, and +
`git stash apply` +
to re-apply your changes after your pull.

. git diff +
If there have been some additions and changes to the remote branch, you can take a look at what is different from our last commit by using the git diff command: +
`git diff HEAD` +
In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer. +
The HEAD is a pointer that holds your position within all your different commits. By default HEAD points to your most recent commit, so it can be used as a quick way to reference that commit without having to look up the SHA. +
Another great use for diff is looking at changes within files that have already been staged with `git add` command. Remember, staged files are files we have told git that are ready to be committed. +
You want to try to keep related changes together in separate commits. Using 'git diff' gives you a good overview of changes you have made and lets you add files or directories one at a time and commit them separately.

.. git diff --staged +
run git diff with the --staged option to see the changes you just staged: +
`git diff --staged`

. git branch +
When developers are working on a feature or bug they'll often create a copy (aka. branch) of their code they can make separate commits to. Then when they're done they can merge this branch back into their main master branch. +
`git branch <branchname>` +
Branches are what naturally happens when you want to work on multiple features at the same time. You wouldn't want to end up with a master branch which has Feature A half done and Feature B half done. +
Rather you'd separate the code base into two "snapshots" (branches) and work on and commit to them separately. As soon as one was ready, you might merge this branch back into the master branch and push it to the remote server. +
Now if you type git branch you'll see two local branches: a main branch named master and your new branch named <branchname>.

.. git checkout <branchname> +
You can switch branches using the git checkout <branch> command: +
`git checkout <branchname>` +
You can use: +
`git checkout -b new_branch` +
to checkout and create a branch at the same time. This is the same thing as doing: +
`git branch new_branch` +
`git checkout new_branch`

.. git rm +
Ok, so you're in the <branchname> branch. You can finally remove all those bad files by using the git rm command which will not only remove the actual files from disk, but will also stage the removal of the files for us. +
You're going to want to use a wildcard again to get all the files in one sweep, go ahead and run: +
`git rm '*.txt'` +
Removing one file is great and all, but what if you want to remove an entire folder? You can use the recursive option on git rm: +
`git rm -r <foldername>` +
This will recursively remove all folders and files from the given directory.

.. git commit +
Now that you've removed all the files you'll need to commit your changes: +
`git commit -m "Remove all bad files"` +
If you happen to delete a file without using 'git rm' you'll find that you still have to 'git rm' the deleted files from the working tree. You can save this step by using the '-a' option on 'git commit', which auto removes deleted files with the commit: +
`git commit -am "Delete stuff"`

.. git checkout master +
Great, you're almost finished with the bug fix, you just need to switch back to the master branch so you can copy (or  merge) your changes from the <branchname> branch back into the master branch. +
Go ahead and checkout the master branch: +
`git checkout master`

.. git merge +
Alrighty, the moment has come when you have to merge your changes from the <branchname> branch into the master branch. +
We're already on the master branch, so we just need to tell Git to merge the <branchname> branch into it: +
`git merge <branchname>`

.. merge conflicts +
Merge Conflicts can occur when changes are made to a file at the same time. A lot of people get really scared when a conflict happens, but fear not! They aren't that scary, you just need to decide which code to keep. +
If you're interested in reading more, take a look the section of the Pro Git book on http://git-scm.com/docs/git-merge#_how_conflicts_are_presented[how conflicts are presented].

.. git branch -d +
Now after successful merge you don't need `<branchname>` branch anymore. Use +
`git branch -d <branchname>` +
to delete a branch.

.. force delete +
What if you have been working on a feature branch and you decide you really don't want this feature anymore? You might decide to delete the branch since you're scrapping the idea. +
You'll notice that `git branch -d <bad_feature>` doesn't work. This is because `-d` won't let you delete something that hasn't been merged. +
You can either add the `--force (-f)` option or use `-D` which combines `-d -f` together into one command.

.. git push +
And the very last step - push everything to a remote repository: +
`git push`

. pull request +
If you're hosting your repo on GitHub, you can do something called a pull request. +
A pull request allows the boss of the project to look through your changes and make comments before deciding to merge in the change. It's a really great feature that is used all the time for remote workers and open-source projects. +
Check out the https://help.github.com/articles/about-pull-requests/[pull request help page] for more information.

